version: '1.0'

services:
  postgres:
    container_name: database_service
    image: postgres
    restart: unless-stopped
    env_file: ./.env
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DATABASE
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      start_period: 10s
      timeout: 4s
      retries: 3
    ports:
      - $POSTGRES_LOCAL_PORT:$POSTGRES_DOCKER_PORT
    volumes:
      - db:/var/lib/postgres

  migration:
    container_name: migration_service
    build: ./backend
    env_file: ./.env
    environment:
      DB_HOST: postgres
      DB_PORT: $POSTGRES_DOCKER_PORT
      DB_USER: $POSTGRES_USER
      DB_PASSWORD: $POSTGRES_PASSWORD
      DB_NAME: $POSTGRES_DATABASE
    depends_on:
      postgres:
        condition: service_healthy
    command: knex migrate:latest

  backend:
    container_name: backend_service
    depends_on:
      migration:
        condition: service_completed_successfully
    build: ./backend
    restart: unless-stopped
    env_file: ./.env
    ports:
      - $NODE_LOCAL_PORT:$NODE_DOCKER_PORT
    develop:
      watch:
        - action: rebuild
          path: ./backend
          target: /api
          ignore:
            - node_modules/
        - action: rebuild
          path: ./backend/package.json
    environment:
      DB_HOST: postgres
      DB_PORT: $POSTGRES_DOCKER_PORT
      DB_USER: $POSTGRES_USER
      DB_PASSWORD: $POSTGRES_PASSWORD
      DB_NAME: $POSTGRES_DATABASE
      NODE_ENV: development
      JWT_SECRET: $JWT_SECRET
    stdin_open: true
    tty: true

volumes:
  db:
